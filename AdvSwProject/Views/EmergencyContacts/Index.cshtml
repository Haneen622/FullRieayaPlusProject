@* namespace AdvSwProject.Views.EmergencyContacts
{
    public class Index
    {
    }
}
 *@

@{
    Layout = null; // ما بدنا Layout خارجي
    ViewData["Title"] = "Emergency Contacts";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Emergency Contacts</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <meta name="color-scheme" content="light dark" />
    <style>
        @@keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(6px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        .animate-fade-in {
            animation: fadeIn 0.45s ease-out forwards;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-[#7BCDF0] to-[#5fb8db] min-h-screen flex items-center justify-center p-4">
    <main class="w-full max-w-3xl bg-white dark:bg-gray-900 rounded-2xl shadow-2xl p-6 sm:p-8 animate-fade-in">
        <!-- Header -->
        <header class="flex items-center justify-between gap-4 mb-6">
            <div>
                <h1 class="text-2xl sm:text-3xl font-extrabold tracking-tight text-[#0f3a4a] dark:text-white">Emergency Contacts</h1>
                <p class="text-gray-600 dark:text-gray-300 mt-1">Add trusted people to contact in emergencies.</p>
            </div>
        </header>

        <!-- Form -->
        <section aria-labelledby="formTitle" class="mb-8">
            <h2 id="formTitle" class="text-xl font-semibold text-[#7BCDF0] mb-3">Add Contact</h2>
            <form id="contactForm" class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                @Html.AntiForgeryToken() <!-- ✅ مهم لتمرير التوكن -->

                <label class="block">
                    <span class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Full Name</span>
                    <input id="name" type="text" required minlength="2" placeholder="e.g., Ahmad Saleh"
                           class="w-full rounded-xl border-gray-300 dark:border-gray-700 dark:bg-gray-800 dark:text-white
                                  focus:border-[#7BCDF0] focus:ring-[#7BCDF0] p-3" />
                </label>

                <label class="block">
                    <span class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Phone Number</span>
                    <input id="phone" type="tel" required inputmode="tel" placeholder="e.g., +962 7X XXX XXXX"
                           pattern="^[+\\d][\\d ()-]{6,}$"
                           class="w-full rounded-xl border-gray-300 dark:border-gray-700 dark:bg-gray-800 dark:text-white
                                  focus:border-[#7BCDF0] focus:ring-[#7BCDF0] p-3" />
                </label>

                <label class="block sm:col-span-2">
                    <span class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Relationship</span>
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                        <select id="relationship"
                                class="w-full rounded-xl border-gray-300 dark:border-gray-700 dark:bg-gray-800 dark:text-white
                                       focus:border-[#7BCDF0] focus:ring-[#7BCDF0] p-3">
                            <option value="Spouse">Spouse</option>
                            <option value="Son/Daughter">Son/Daughter</option>
                            <option value="Sibling">Sibling</option>
                            <option value="Neighbor">Neighbor</option>
                            <option value="Friend">Friend</option>
                            <option value="Caregiver">Caregiver</option>
                            <option value="Doctor">Doctor</option>
                        </select>
                        <input id="relationshipCustom" type="text" placeholder="Or type a custom relationship..."
                               class="w-full rounded-xl border-gray-300 dark:border-gray-700 dark:bg-gray-800 dark:text-white
                                      focus:border-[#7BCDF0] focus:ring-[#7BCDF0] p-3" />
                    </div>
                </label>

                <div class="sm:col-span-2 flex items-center justify-end gap-3 mt-2">
                    <button type="reset"
                            class="px-4 py-2 rounded-xl bg-gray-200 hover:bg-gray-300 dark:bg-gray-800 dark:hover:bg-gray-700
                                   text-gray-800 dark:text-gray-100">
                        Clear
                    </button>
                    <button type="submit"
                            class="px-5 py-2.5 rounded-xl bg-[#7BCDF0] hover:bg-[#65b9de] text-white font-semibold shadow">
                        Add
                    </button>
                </div>
            </form>
        </section>

        <!-- List -->
        <section aria-labelledby="listTitle">
            <h2 id="listTitle" class="text-xl font-semibold text-[#7BCDF0] mb-3">Saved Contacts</h2>
            <div id="emptyState"
                 class="rounded-xl border border-dashed border-[#7BCDF0] p-6 text-center text-gray-600 dark:text-gray-300">
                No contacts yet. Add your first emergency contact above.
            </div>
            <ul id="contacts" class="mt-4 grid grid-cols-1 gap-3"></ul>
        </section>
    </main>

    <!-- Template for list items -->
    <template id="contactItemTpl">
        <li class="flex items-start justify-between gap-3 rounded-2xl border border-gray-200 dark:border-gray-800
                   bg-white dark:bg-gray-900 p-4">
            <div class="min-w-0">
                <p class="font-semibold text-gray-900 dark:text-gray-100 text-lg leading-6">
                    <span data-field="name"></span>
                </p>
                <p class="text-gray-600 dark:text-gray-300">
                    <span class="text-[#0f3a4a] font-medium">Phone:</span>
                    <span data-field="phone"></span>
                </p>
                <p class="text-gray-600 dark:text-gray-300">
                    <span class="text-[#0f3a4a] font-medium">Relationship:</span>
                    <span data-field="relationship"></span>
                </p>
            </div>
            <div class="flex items-center gap-2 shrink-0">
                <button class="editBtn inline-flex items-center gap-2 px-3 py-1.5 rounded-xl
                               bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700
                               hover:border-[#7BCDF0] hover:text-[#0f3a4a] shadow-sm" title="Edit" aria-label="Edit contact">
                    ✏️
                </button>
                <button class="deleteBtn inline-flex items-center gap-2 px-3 py-1.5 rounded-xl
                               bg-[#ffefef] text-red-700 hover:bg-red-100 border border-red-200"
                        title="Delete" aria-label="Delete contact">
                    🗑️
                </button>
            </div>
        </li>
    </template>

    <!-- JavaScript -->
    <script>
        const form = document.getElementById('contactForm');
        const nameEl = document.getElementById('name');
        const phoneEl = document.getElementById('phone');
        const relSel = document.getElementById('relationship');
        const relCustom = document.getElementById('relationshipCustom');
        const list = document.getElementById('contacts');
        const empty = document.getElementById('emptyState');

        // API endpoints من الكنترولر
        const API = {
          list: '/EmergencyContacts/List',
          create: '/EmergencyContacts/Create',
          update: id => `/EmergencyContacts/Update/${id}`,
          delete: id => `/EmergencyContacts/Delete/${id}`
        };

        function antiXsrf(){
          const el = document.querySelector('input[name="__RequestVerificationToken"]');
          return el ? el.value : '';
        }

        async function fetchJSON(url, options){
          const res = await fetch(url, {
            headers: {
              'Content-Type': 'application/json',
              'RequestVerificationToken': antiXsrf()
            },
            ...options
          });
          if(!res.ok) throw new Error(await res.text());
          return res.status === 204 ? null : res.json();
        }

        function currentRelationship(){
          const custom = relCustom.value.trim();
          return custom || relSel.value;
        }

        async function loadContacts(){ return fetchJSON(API.list); }

        function renderItem(c){
          const tpl = document.getElementById('contactItemTpl');
          const node = tpl.content.cloneNode(true);
          node.querySelector('[data-field="name"]').textContent = c.name;
          node.querySelector('[data-field="phone"]').textContent = c.phone;
          node.querySelector('[data-field="relationship"]').textContent = c.relationship;
          node.querySelector('.editBtn').addEventListener('click', ()=> startEdit(c));
          node.querySelector('.deleteBtn').addEventListener('click', ()=> remove(c.id));
          return node;
        }

        async function render(){
          const contacts = await loadContacts();
          list.innerHTML = '';
          if(!contacts.length){ empty.classList.remove('hidden'); return; }
          empty.classList.add('hidden');
          contacts.forEach(c => list.appendChild(renderItem(c)));
        }

        async function add(contact){
          await fetchJSON(API.create,{method:'POST',body:JSON.stringify(contact)});
          await render();
        }

        function startEdit(c){
          nameEl.value = c.name; phoneEl.value = c.phone;
          relCustom.value = '';
          const selOptions = Array.from(relSel.options).map(o=>o.value);
          if(selOptions.includes(c.relationship)){
            relSel.value = c.relationship;
          } else {
            relSel.value = selOptions[0]; relCustom.value = c.relationship;
          }
          form.dataset.editId = c.id;
          window.scrollTo({top:0, behavior:'smooth'});
        }

        async function updateContact(id, contact){
          contact.id = id;
          await fetchJSON(API.update(id),{method:'POST',body:JSON.stringify(contact)});
          await render();
        }

        async function remove(id){
          await fetchJSON(API.delete(id),{method:'POST'});
          await render();
        }

        form.addEventListener('submit', async (e)=>{
          e.preventDefault();
          if(!form.reportValidity()) return;
          const contact = {
            name: nameEl.value.trim(),
            phone: phoneEl.value.trim(),
            relationship: currentRelationship()
          };
          const editId = form.dataset.editId;
          if (editId) {
            await updateContact(parseInt(editId,10), contact);
            delete form.dataset.editId;
          } else {
            await add(contact);
          }
          form.reset();
          relSel.value = 'Spouse';
        });

        // Initialize
        render().catch(console.error);
    </script>
</body>
</html>
